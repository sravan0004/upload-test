int totalSheet = 0; //No of sheets in Excel file  
using (OleDbConnection oledbConnection = new OleDbConnection(
				(fileName.TrimEnd().ToLower().EndsWith("x"))
				? "Provider=Microsoft.ACE.OLEDB.12.0;Data Source='" + fileName + "';" + "Extended Properties='Excel 12.0 Xml;HDR=YES;'"
				: "provider=Microsoft.Jet.OLEDB.4.0;Data Source='" + fileName + "';Extended Properties=Excel 8.0;"))
{
				oledbConnection.Open();
				OleDbCommand command = new OleDbCommand();
				OleDbDataAdapter dataAdapter = new OleDbDataAdapter();
				DataSet dataSet = new DataSet();
				DataTable dataTable = oledbConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
				if (dataTable != null)
				{
					var tempDataTable = (from dataRow in dataTable.AsEnumerable()
										 where !dataRow["TABLE_NAME"].ToString().Contains("FilterDatabase")
										 && !dataRow["TABLE_NAME"].ToString().Contains("List")
										 select dataRow).CopyToDataTable();
					dataTable = tempDataTable;
					totalSheet = dataTable.Rows.Count;
				}

				command.Connection = oledbConnection;
				command.CommandType = CommandType.Text;
				command.CommandText = "SELECT * FROM [" + sheetName + "$]";
				//cmd.CommandText = String.Format("select * from [{0}${1}]", sheetName, "A2:ZZ");
				//cmd.CommandText = String.Format("select * from [{0}${1}]", "Sheet1", "A2:ZZ");
				dataAdapter = new OleDbDataAdapter(command);
				dataAdapter.Fill(dataSet, "excelData");
				dtResult = dataSet.Tables["excelData"];
				oledbConnection.Close();


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Linq;

public static class ExcelReader
{
    public static List<Dictionary<string, object>> ReadExcelFile(string fileName, string sheetName)
    {
        var results = new List<Dictionary<string, object>>();

        string connectionString = fileName.TrimEnd().ToLower().EndsWith("x")
            ? $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source='{fileName}';Extended Properties='Excel 12.0 Xml;HDR=NO;'"
            : $"Provider=Microsoft.Jet.OLEDB.4.0;Data Source='{fileName}';Extended Properties='Excel 8.0;HDR=NO;'";

        using (OleDbConnection oledbConnection = new OleDbConnection(connectionString))
        {
            oledbConnection.Open();

            var command = new OleDbCommand($"SELECT * FROM [{sheetName}$]", oledbConnection);
            var adapter = new OleDbDataAdapter(command);
            var dataSet = new DataSet();
            adapter.Fill(dataSet);

            DataTable dt = dataSet.Tables[0];

            if (dt.Rows.Count < 2)
                throw new Exception("The sheet must have at least 2 rows for headers.");

            // Combine first 2 rows into headers
            var headers = new List<string>();
            for (int col = 0; col < dt.Columns.Count; col++)
            {
                string h1 = dt.Rows[0][col]?.ToString().Trim();
                string h2 = dt.Rows[1][col]?.ToString().Trim();

                string header = string.Join(" ", new[] { h1, h2 }.Where(h => !string.IsNullOrEmpty(h)));
                if (string.IsNullOrEmpty(header))
                    header = $"Column{col + 1}";

                headers.Add(header);
            }

            // Data starts at row 3
            for (int row = 2; row < dt.Rows.Count; row++)
            {
                var rowDict = new Dictionary<string, object>();
                for (int col = 0; col < dt.Columns.Count; col++)
                {
                    rowDict[headers[col]] = dt.Rows[row][col];
                }
                results.Add(rowDict);
            }
        }

        return results;
    }
}
class Program
{
    static void Main()
    {
        string fileName = @"C:\Path\To\EcRf-Template.xlsx";
        string sheetName = "Sheet1";

        var records = ExcelReader.ReadExcelFile(fileName, sheetName);

        foreach (var row in records)
        {
            Console.WriteLine(string.Join(", ", row.Select(kv => $"{kv.Key}: {kv.Value}")));
        }
    }
}
