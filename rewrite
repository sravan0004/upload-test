@{
    ViewData["Title"] = "Upload Specimen CSV/Excel";
    var successMessage = ViewBag.SuccessMessage as string;
    var errorCount = TempData["ErrorCount"] as int?;
}

<h2>Upload Specimen Data</h2>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div style="color:green; margin-bottom:10px;">
        <strong>@successMessage</strong>
    </div>
}

@if (errorCount.HasValue && errorCount > 0)
{
    <div style="color:red; margin-bottom:10px;">
        <strong>@errorCount errors found.</strong><br />
        <a asp-action="DownloadErrors" class="btn btn-danger">Download Error Report</a>
    </div>
}

<form asp-action="Upload" asp-controller="SpecimenUpload" method="post" enctype="multipart/form-data">
    <div>
        <input type="file" name="file" required />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Upload</button>
</form>
public class SpecimenUploadController : Controller
{
    private readonly ApplicationDbContext _context;

    public SpecimenUploadController(ApplicationDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult Index()
    {
        return View();
    }

    [HttpPost]
    public IActionResult Upload(IFormFile file)
    {
        if (file == null || file.Length == 0)
        {
            TempData["Errors"] = "No file uploaded.";
            TempData["ErrorCount"] = 1;
            return RedirectToAction("Index");
        }

        using var stream = file.OpenReadStream();
        var processor = new FileProcessor();
        var table = processor.ReadFileToDataTable(stream, file.FileName, out var validation);

        if (!validation.IsValid)
        {
            TempData["Errors"] = string.Join(Environment.NewLine, validation.Errors);
            TempData["ErrorCount"] = validation.Errors.Count;
            return RedirectToAction("Index");
        }

        // ✅ Validate headers
        var headerCheck = processor.ValidateHeaders(table);
        if (!headerCheck.IsValid)
        {
            TempData["Errors"] = string.Join(Environment.NewLine, headerCheck.Errors);
            TempData["ErrorCount"] = headerCheck.Errors.Count;
            return RedirectToAction("Index");
        }

        var validator = new LookupValidator(_context);
        var specimens = processor.ParseDataTable(table, validator, out var errors);

        if (errors.Any())
        {
            TempData["Errors"] = string.Join(Environment.NewLine, errors);
            TempData["ErrorCount"] = errors.Count;
            return RedirectToAction("Index");
        }

        // ✅ Save valid rows
        _context.Specimen.AddRange(specimens);
        _context.SaveChanges();

        ViewBag.SuccessMessage = $"{specimens.Count} records processed and saved.";
        return View("Index");
    }

    [HttpGet]
    public IActionResult DownloadErrors()
    {
        if (!TempData.ContainsKey("Errors"))
            return RedirectToAction("Index");

        var errorText = TempData["Errors"].ToString();
        var bytes = System.Text.Encoding.UTF8.GetBytes(errorText ?? "");
        var fileName = $"UploadErrors_{DateTime.Now:yyyyMMdd_HHmmss}.txt";

        return File(bytes, "text/plain", fileName);
    }
}
using ExcelDataReader;
using System.Data;

public class FileProcessor
{
    public DataTable ReadFileToDataTable(Stream fileStream, string fileName, out ValidationResult validationResult)
    {
        validationResult = new ValidationResult();
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

        var dataSetConfig = new ExcelDataSetConfiguration
        {
            ConfigureDataTable = _ => new ExcelDataTableConfiguration
            {
                UseHeaderRow = true // ✅ Treat first row as headers
            }
        };

        try
        {
            IExcelDataReader reader;

            if (fileName.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
                reader = ExcelReaderFactory.CreateCsvReader(fileStream);
            else if (fileName.EndsWith(".xls", StringComparison.OrdinalIgnoreCase) ||
                     fileName.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase))
                reader = ExcelReaderFactory.CreateReader(fileStream);
            else
            {
                validationResult.IsValid = false;
                validationResult.Errors.Add("Unsupported file format. Please upload CSV or Excel.");
                return new DataTable();
            }

            using (reader)
            {
                var result = reader.AsDataSet(dataSetConfig);

                if (result.Tables.Count == 0 || result.Tables[0].Rows.Count == 0)
                {
                    validationResult.IsValid = false;
                    validationResult.Errors.Add("File is empty or has no readable data.");
                    return new DataTable();
                }

                return result.Tables[0];
            }
        }
        catch (Exception ex)
        {
            validationResult.IsValid = false;
            validationResult.Errors.Add($"File read failed: {ex.Message}");
            return new DataTable();
        }
    }

    public ValidationResult ValidateHeaders(DataTable table)
    {
        var result = new ValidationResult();

        foreach (var required in SpecimenHeaders.RequiredHeaders)
        {
            if (!table.Columns.Contains(required))
            {
                result.IsValid = false;
                result.Errors.Add($"Missing required header: {required}");
            }
        }

        return result;
    }

    public List<Specimen> ParseDataTable(DataTable table, LookupValidator validator, out List<string> errorList)
    {
        var specimens = new List<Specimen>();
        errorList = new List<string>();

        int rowNumber = 1;
        foreach (DataRow dr in table.Rows)
        {
            var errors = new List<string>();

            // Mandatory fields
            var mandatoryFields = new Dictionary<string, string>
            {
                { "ID", dr["ID"]?.ToString() ?? string.Empty },
                { "Specimen Identifier", dr["Specimen Identifier"]?.ToString() ?? string.Empty },
                { "Panel Identifier", dr["Panel Identifier"]?.ToString() ?? string.Empty }
            };
            errors.AddRange(validator.ValidateMandatoryFields(mandatoryFields));

            // DB Lookups
            errors.AddRange(validator.ValidateStudy(dr["Study"]?.ToString() ?? string.Empty));
            errors.AddRange(validator.ValidateSex(dr["Sex"]?.ToString() ?? string.Empty));
            errors.AddRange(validator.ValidateSampleType(dr["Sample Type"]?.ToString() ?? string.Empty));

            // Age validation
            if (int.TryParse(dr["Age"]?.ToString(), out var age))
                errors.AddRange(validator.ValidateAge(age));
            else
                errors.Add("Invalid Age format.");

            if (errors.Any())
            {
                errorList.AddRange(errors.Select(e => $"Row {rowNumber}: {e}"));
            }
            else
            {
                specimens.Add(new Specimen
                {
                    ID = Convert.ToInt32(dr["ID"]),
                    SpecimenIdentifier = dr["Specimen Identifier"].ToString(),
                    PanelIdentifier = dr["Panel Identifier"].ToString(),
                    StudyCodeName = dr["Study"].ToString(),
                    Sex = dr["Sex"].ToString(),
                    SampleTypeCode = dr["Sample Type"].ToString(),
                    Age = age
                });
            }

            rowNumber++;
        }

        return specimens;
    }
}
public class ValidationResult
{
    public bool IsValid { get; set; } = true;
    public List<string> Errors { get; set; } = new();
}
public static class SpecimenHeaders
{
    public static readonly List<string> RequiredHeaders = new()
    {
        "ID",
        "Specimen Identifier",
        "Panel Identifier",
        "Study",
        "Sex",
        "Sample Type",
        "Age"
    };
}
