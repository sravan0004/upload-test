public async Task<IActionResult> Save([Bind] UserAccountModel userModel)
{
    ModelState.Remove("UserAccountList");
    ModelState.Remove("AuditableModel");
    ModelState.Remove("SecurityRoleModel");
    ModelState.Remove("UserSites");
    ModelState.Remove("Sites");
    ModelState.Remove("SiteList");
    ModelState.Remove("UserSiteList");
    ModelState.Remove("UserSiteModel");

    if (!ModelState.IsValid)
    {
        TempData.Put(Constants.Alert, new AlertModel(Constants.MessageType.Error,
            Constants.ModuleName.UserAccount, "Form is not valid."));
        return View(Constants.APIAction.Modify,
            await _userAccountRepository.InitializeModelAsync(userModel, base.GetUserAccountID(), base.GetSecurityModule()));
    }

    var (result, message) = await _userAccountRepository.SaveUserAsync(
        userModel, base.GetUserAccountID(), Url, Request);

    if (result.Succeeded)
    {
        TempData.Put(Constants.Alert, new AlertModel(Constants.MessageType.Success,
            Constants.ModuleName.UserAccount, $"{Constants.ModuleName.UserAccount} '{message}'"));
        return RedirectToAction(Constants.APIAction.Search, Constants.APIController.UserAccount,
            _userAccountRepository.GetRouteValues((string)CacheHelper.cache.Get(Constants.CacheName)));
    }
    else
    {
        TempData.Put(Constants.Alert, new AlertModel(Constants.MessageType.Error,
            Constants.ModuleName.UserAccount, message));
        return View(Constants.APIAction.Modify,
            await _userAccountRepository.InitializeModelAsync(userModel, base.GetUserAccountID(), base.GetSecurityModule()));
    }
}

public async Task<(IdentityResult Result, string Message)> SaveUserAsync(
    UserAccountModel userModel,
    int currentUserId,
    IUrlHelper urlHelper,
    HttpRequest request)
{
    var messages = new List<string>();
    var isUpdating = userModel.UserAccount.Id > 0;

    // Email validation
    if (string.IsNullOrEmpty(userModel.UserAccount.Email))
    {
        return (IdentityResult.Failed(), "Please provide Email Address.");
    }

    var existingUser = await _userManager.FindByEmailAsync(userModel.UserAccount.Email);
    if (!isUpdating && existingUser != null)
    {
        return (IdentityResult.Failed(), "Existing User, please verify");
    }

    UserAccount user;
    IdentityResult createResult;

    if (isUpdating)
    {
        user = existingUser;
        user.FirstName = userModel.UserAccount.FirstName;
        user.LastName = userModel.UserAccount.LastName;
        user.MiddleName = userModel.UserAccount.MiddleName;
        user.Title = userModel.UserAccount.Title;
        user.PhoneNumber = userModel.UserAccount.PhoneNumber;
        user.MobileNumber = userModel.UserAccount.MobileNumber;
        user.ISSystemAdmin = userModel.UserAccount.ISSystemAdmin;
        user.Active = userModel.UserAccount.Active;
        user.DisplayName = $"{user.FirstName} {user.LastName}";
        user.Updated = DateTime.Now;
        user.UpdatedBy = currentUserId;

        createResult = await _userManager.UpdateAsync(user);
    }
    else
    {
        user = new UserAccount
        {
            FirstName = userModel.UserAccount.FirstName,
            LastName = userModel.UserAccount.LastName,
            MiddleName = userModel.UserAccount.MiddleName,
            Title = userModel.UserAccount.Title,
            PhoneNumber = userModel.UserAccount.PhoneNumber,
            MobileNumber = userModel.UserAccount.MobileNumber,
            ISSystemAdmin = userModel.UserAccount.ISSystemAdmin,
            Active = userModel.UserAccount.Active,
            DisplayName = $"{userModel.UserAccount.FirstName} {userModel.UserAccount.LastName}",
            Email = userModel.UserAccount.Email,
            UserName = userModel.UserAccount.Email,
            Created = DateTime.Now,
            CreatedBy = currentUserId
        };

        createResult = await _userManager.CreateAsync(user);
        if (!createResult.Succeeded)
            return (createResult, "Failed to create user.");

        // Send welcome email
        var token = await _userManager.GeneratePasswordResetTokenAsync(user);
        var callbackUrl = urlHelper.Action("SignUp", "Account",
            new { email = user.Email, token = WebUtility.UrlEncode(token) }, request.Scheme);

        var emailMessage = $@"
            <html><body>
            <h2>Welcome to eCRF 2.0, {user.DisplayName}!</h2>
            <p>To get started, please click below:</p>
            <a href='{callbackUrl}'>Complete Your Setup</a>
            <p>Contact us at {ConfigurationHelper.UserAccountSupportGroupEmail}</p>
            </body></html>";

        var emailHelper = new EmailHelper();
        var emailModel = new EmailModel
        {
            To = user.Email,
            Subject = $"You're Invited! Start Your Journey with {ConfigurationHelper.ApplicationName}",
            Body = emailMessage
        };
        emailHelper.Send(emailModel);
    }

    // Manage roles
    var activeRoles = userModel.UserSecurityRoleModel
        .Where(x => x.Active)
        .Select(x => x.SecurityRoleName)
        .ToList();

    var currentRoles = await _userManager.GetRolesAsync(user);
    var rolesToAdd = activeRoles.Except(currentRoles).ToList();
    var rolesToRemove = currentRoles.Except(activeRoles).ToList();

    await _userManager.RemoveFromRolesAsync(user, rolesToRemove);
    await _userManager.AddToRolesAsync(user, rolesToAdd);

    // Save user sites
    await SaveUserSiteAsync(user.Id, userModel.UserSiteList);

    return (createResult, $"{user.DisplayName} saved successfully.");
}
Task<IdentityResult> SaveUserAsync(UserAccountModel userModel, int currentUserId, IUrlHelper urlHelper, HttpRequest request);
