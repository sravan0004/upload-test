@model IDDA.Web.ViewModels.UploadViewModel
@using IDDA.Domain.Helpers
@{
	ViewData["Title"] = @Constants.ModuleName.SpecimenBulkUpdate;
	Layout = "~/Views/Shared/_Layout.cshtml";

    var successMessage = ViewBag.SuccessMessage as string;
    var errorCount = TempData["ErrorCount"] as int?;
}

<h2>Upload Specimen Data</h2>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div style="color:green; margin-bottom:10px;">
        <strong>@successMessage</strong>
    </div>
}



@using (Html.BeginForm("Upload", "SpecimenBulkUpdate", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.LabelFor(m => m.File)
    @Html.TextBoxFor(m => m.File, new { type = "file" })
    @Html.ValidationMessageFor(m => m.File)

    <button type="submit">Upload</button>

    @if (errorCount.HasValue && errorCount > 0)
    {
        <div style="color:red; margin-bottom:10px;">
            <strong>@errorCount errors found.</strong><br />
            @* <a asp-action="DownloadErrors" class="btn btn-danger" >Download Error(s) File</a> *@
            <button id="exportButton" type="submit" class="btn btn-danger" title="Click to export" formaction="/SpecimenBulkUpdate/DownloadErrors">
                <i class="fas fa-file-export fa-lg"></i> Download Error(s) File
            </button>
        </div>
    }
}


@section Scripts {
	@{
		<script src="~/js/custom-script/specimen-bulk-update.js"></script>
		<script src="~/js/custom-script/jquery-toast-alert.js"></script>
        <partial name="_ValidationScriptsPartial" />
    }
}

public async Task<IActionResult> Upload(UploadViewModel model)
{
    if (!ModelState.IsValid)
    {

        var modelErrors = ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage)
                    .ToList();

        TempData["Errors"] = string.Join(" | ", modelErrors);
        TempData["ErrorCount"] = modelErrors.Count;
        return RedirectToAction("Index");
    }


    Guid guid = Guid.NewGuid();
    var file = HttpContext.Request.Form.Files[0];
    var specimenRepository = new SpecimenRepository(_context);

    if (!file.FileName.ToUpper().EndsWith(Constants.CSVFileType))
    {
        TempData["Errors"] = "Invalid file uploaded.";
        TempData["ErrorCount"] = 1;
        return RedirectToAction("Index");
    }

    string filepath = $"{ConfigurationHelper.SpecimenFileUploadPath}\\{guid.ToString()}.csv";
    using (var fileStream = new FileStream(filepath, FileMode.Create, FileAccess.Write))
    {
        file.OpenReadStream().CopyTo(fileStream);
    }

    // System.IO.File.Delete(filepath);
    if (file == null || file.Length == 0)
    {
        TempData["Errors"] = "No file uploaded.";
        TempData["ErrorCount"] = 1;
        return RedirectToAction("Index");
    }

    using var stream = file.OpenReadStream();
    var processor = new FileProcessor(_context);

    //1 converts to datatable
    var validationResult = processor.ReadFileToDataTable(stream, file.FileName);

    if (!validationResult.IsValid)
    {
        TempData["Errors"] = string.Join(Environment.NewLine, validationResult.Errors);
        TempData["ErrorCount"] = validationResult.Errors.Count;
        return RedirectToAction("Index");
    }

    //2. Validate headers
    var headerCheck = processor.ValidateHeaders(validationResult.Specimens);
    if (!headerCheck.IsValid)
    {
        TempData["Errors"] = string.Join(Environment.NewLine, headerCheck.Errors);
        TempData["ErrorCount"] = headerCheck.Errors.Count;
        return RedirectToAction("Index");
    }

    var validator = new LookupValidator(_context);

    //3. Additinal Validations (Lookups, DataTypes etc)
    var specimens = processor.ParseDataTable(validationResult.Specimens, validator, out var errors);

    if (errors.Any())
    {
        TempData["Errors"] = string.Join(Environment.NewLine, errors);
        TempData["ErrorCount"] = errors.Count;
        return RedirectToAction("Index");
    }

    // DB Update
    var dbResult = await specimenRepository.BulkUploadUpdateSpecimenAsyn(specimens);
    if (dbResult.Count > 0)
    {
        TempData["Errors"] = string.Join(",", dbResult);
        TempData["ErrorCount"] = 1;
        return RedirectToAction("Index");
    }
    else
    {
        ViewBag.SuccessMessage = $"{specimens.Count} records processed and saved.";
        return View("Index");
    }
}

public IActionResult DownloadErrors()
{
    if (!TempData.ContainsKey("Errors"))
        return RedirectToAction("Index");

    var errorText = TempData["Errors"].ToString();
    var bytes = System.Text.Encoding.UTF8.GetBytes(errorText ?? "");
    var fileName = $"UploadErrors_{DateTime.Now:yyyyMMdd_HHmmss}.txt";

    return File(bytes, "text/plain", fileName);
}
