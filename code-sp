public class Specimen
{
    public int ID { get; set; }  // mandatory
    public string SpecimenIdentifier { get; set; } = string.Empty; // mandatory
    public string PanelIdentifier { get; set; } = string.Empty; // mandatory

    public string Study { get; set; } = string.Empty;
    public string Sex { get; set; } = string.Empty;
    public string SampleType { get; set; } = string.Empty;

    // Add other columns as needed...
}


public class LookupValidator
{
    private readonly ApplicationDbContext _context;

    public LookupValidator(ApplicationDbContext context)
    {
        _context = context;
    }

    // Mandatory field check
    public List<string> ValidateMandatoryFields(string id, string specimenIdentifier, string panelIdentifier)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(id))
            errors.Add("ID is required.");

        if (string.IsNullOrWhiteSpace(specimenIdentifier))
            errors.Add("Specimen Identifier is required.");

        if (string.IsNullOrWhiteSpace(panelIdentifier))
            errors.Add("Panel Identifier is required.");

        return errors;
    }

    public List<string> ValidateStudy(string csvStudies)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(csvStudies))
        {
            errors.Add("Study is required.");
            return errors;
        }

        var inputStudies = csvStudies.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var dbStudies = _context.Studies.Select(s => s.Name).ToList();

        foreach (var s in inputStudies)
        {
            if (!dbStudies.Contains(s, StringComparer.OrdinalIgnoreCase))
                errors.Add($"Invalid Study: {s}");
        }

        return errors;
    }

    public List<string> ValidateSex(string sexValue)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(sexValue))
        {
            errors.Add("Sex is required.");
            return errors;
        }

        var dbSexes = _context.Sexes.Select(s => s.Value).ToList();
        if (!dbSexes.Contains(sexValue, StringComparer.OrdinalIgnoreCase))
            errors.Add($"Invalid Sex: {sexValue}");

        return errors;
    }

    public List<string> ValidateSampleType(string csvSampleTypes)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(csvSampleTypes))
        {
            errors.Add("Sample Type is required.");
            return errors;
        }

        var inputTypes = csvSampleTypes.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var dbTypes = _context.SampleTypes.Select(s => s.Name).ToList();

        foreach (var t in inputTypes)
        {
            if (!dbTypes.Contains(t, StringComparer.OrdinalIgnoreCase))
                errors.Add($"Invalid Sample Type: {t}");
        }

        return errors;
    }
}

var validator = new LookupValidator(_context);

int rowNumber = 1;
foreach (var row in parsedRows)
{
    var errors = new List<string>();

    // 1. Mandatory checks
    errors.AddRange(validator.ValidateMandatoryFields(row.ID, row.SpecimenIdentifier, row.PanelIdentifier));

    // 2. Lookup checks
    errors.AddRange(validator.ValidateStudy(row.Study));
    errors.AddRange(validator.ValidateSex(row.Sex));
    errors.AddRange(validator.ValidateSampleType(row.SampleType));

    if (errors.Any())
    {
        errorList.AddRange(errors.Select(e => $"Row {rowNumber}: {e}"));
        rowNumber++;
        continue; // Skip saving this invalid row
    }

    // âœ… If valid, map to entity and save
    var specimen = new Specimen
    {
        ID = int.Parse(row.ID), // safe here since it's already validated
        SpecimenIdentifier = row.SpecimenIdentifier,
        PanelIdentifier = row.PanelIdentifier,
        Study = row.Study,
        Sex = row.Sex,
        SampleType = row.SampleType
    };

    _context.Specimens.Add(specimen);
    rowNumber++;
}
await _context.SaveChangesAsync();

public List<string> ValidateMandatoryFields(Dictionary<string, string> fields)
{
    var errors = new List<string>();

    foreach (var field in fields)
    {
        if (string.IsNullOrWhiteSpace(field.Value))
        {
            errors.Add($"{field.Key} is required.");
        }
    }

    return errors;
}
var mandatoryFields = new Dictionary<string, string>
{
    { "ID", row.ID },
    { "Specimen Identifier", row.SpecimenIdentifier },
    { "Panel Identifier", row.PanelIdentifier }
    // ðŸ‘‰ later just add more fields here, no need to change the validator
};

errors.AddRange(validator.ValidateMandatoryFields(mandatoryFields));
