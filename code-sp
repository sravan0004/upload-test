public IActionResult Upload()
{
    Guid guid = Guid.NewGuid();
    var file = HttpContext.Request.Form.Files[0];

    string filepath = $"{ConfigurationHelper.SpecimenFileUploadPath}\\{guid.ToString()}.csv";
    using (var fileStream = new FileStream(filepath, FileMode.Create, FileAccess.Write))
    {
        file.OpenReadStream().CopyTo(fileStream);
    }

    // System.IO.File.Delete(filepath);

    if (file == null || file.Length == 0)
    {
        ViewBag.Errors = new List<string> { "No file uploaded." };
        return View("Index");
    }

    using var stream = file.OpenReadStream();
    try
    {
        var _csvProcessor = new CsvProcessor();
        var specimens = _csvProcessor.ProcessCsv(stream, out var validation);


        var validator = new LookupValidator(_context);
        var errorList = new List<string>();
        int rowNumber = 1;

        foreach (var row in specimens)
        {
            var errors = new List<string>();

            var mandatoryFields = new Dictionary<string, string>
                {
                    { "ID", row.ID.ToString() },
                    { "Specimen Identifier", row.SpecimenIdentifier },
                    { "Panel Identifier", row.PanelIdentifier }
                };

            errors.AddRange(validator.ValidateMandatoryFields(mandatoryFields));

            errors.AddRange(validator.ValidateStudy(row.Study));
            errors.AddRange(validator.ValidateSex(row.Sex));
            errors.AddRange(validator.ValidateSampleType(row.SampleType));
            errors.AddRange(validator.ValidateAge(row.Age));

            if (errors.Any())
            {
                errorList.AddRange(errors.Select(e => $"Row {rowNumber}: {e}"));
                rowNumber++;
                continue;
            }

            var specimen = new Specimen
            {
                ID = row.ID,
                SpecimenIdentifier = row.SpecimenIdentifier,
                PanelIdentifier = row.PanelIdentifier,
                StudyCodeName = row.Study,
                Sex = row.Sex,
                SampleTypeCode = row.SampleType
            };

            rowNumber++;
        }

        if (!validation.IsValid)
        {
            ViewBag.Errors = validation.Errors;
            return View("Index");
        }

        // TODO - Finish DB Process

        ViewBag.SuccessMessage = $"{specimens.Count} records processed and saved.";
        return View("Index");
    }
    catch (Exception ex)
    {
        ViewBag.Errors = new List<string> { $"Unexpected error: {ex.Message}" };
        return View("Index");
    }

public List<SpecimenBulkUpdateModel> ProcessCsv(Stream fileStream, out ValidationResult validationResult)
{
    var specimens = new List<SpecimenBulkUpdateModel>();
    validationResult = new ValidationResult();

    using var reader = new StreamReader(fileStream);
    var headerLine = reader.ReadLine();
    if (string.IsNullOrEmpty(headerLine))
    {
        validationResult.IsValid = false;
        validationResult.Errors.Add("CSV is empty or missing header row.");
        return specimens;
    }

    var headers = headerLine.Split(',');
    var headerCheck = ValidateHeaders(headers);
    if (!headerCheck.IsValid)
    {
        validationResult.IsValid = false;
        validationResult.Errors.AddRange(headerCheck.Errors);
        return specimens;
    }

    string? line;
    int rowIndex = 1;

    while ((line = reader.ReadLine()) != null)
    {
        rowIndex++;
        var values = line.Split(',');

        var entity = new SpecimenBulkUpdateModel();

        foreach (var column in SpecimenHeaders.ColumnTypes)
        {
            var colIndex = Array.FindIndex(headers, h => h.Equals(column.Key, StringComparison.OrdinalIgnoreCase));
            if (colIndex == -1) continue;

            var rawValue = values[colIndex];

            try
            {
                var typedValue = ConvertValue(rawValue, column.Value);

                if (_headerToProperty.TryGetValue(column.Key, out var propName))
                {
                    var prop = typeof(SpecimenBulkUpdateModel).GetProperty(propName);
                    if (prop != null)
                        prop.SetValue(entity, typedValue);
                }
            }
            catch (Exception ex)
            {
                validationResult.IsValid = false;
                validationResult.Errors.Add($"Row {rowIndex}, Column '{column.Key}': {ex.Message}");
            }
        }

        specimens.Add(entity);
    }

    return specimens;
}
public class LookupValidator
{
    private readonly IDDAContext _context;

    public LookupValidator(IDDAContext context)
    {
        _context = context;
    }

    public List<string> ValidateMandatoryFields(Dictionary<string, string> fields)
    {
        var errors = new List<string>();

        foreach (var field in fields)
        {
            if (string.IsNullOrWhiteSpace(field.Value))
            {
                errors.Add($"{field.Key} is required.");
            }
        }

        return errors;
    }

    public List<string> ValidateStudy(string csvStudies)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(csvStudies))
        {
            errors.Add("Study is required.");
            return errors;
        }

        var inputStudies = csvStudies.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var dbStudies = _context.StudyType.Select(s => s.Name).ToList();

        foreach (var s in inputStudies)
        {
            if (!dbStudies.Contains(s, StringComparer.OrdinalIgnoreCase))
                errors.Add($"Invalid Study: {s}");
        }

        return errors;
    }

    public List<string> ValidateSex(string sexValue)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(sexValue))
        {
            errors.Add("Sex is required.");
            return errors;
        }

        var dbSexes = new SexRepostitory().PopulateSex().Select(s => s.SexName);
        if (!dbSexes.Contains(sexValue, StringComparer.OrdinalIgnoreCase))
            errors.Add($"Invalid Sex: {sexValue}");

        return errors;
    }

    public List<string> ValidateSampleType(string csvSampleTypes)
    {
        var errors = new List<string>();
        if (string.IsNullOrWhiteSpace(csvSampleTypes))
        {
            errors.Add("Sample Type is required.");
            return errors;
        }

        var inputTypes = csvSampleTypes.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        var dbTypes = _context.SampleType.Select(s => s.SampleName).ToList();

        foreach (var t in inputTypes)
        {
            if (!dbTypes.Contains(t, StringComparer.OrdinalIgnoreCase))
                errors.Add($"Invalid Sample Type: {t}");
        }

        return errors;
    }

    public List<string> ValidateAge(int age)
    {
        var errors = new List<string>();

        if (age <= 0 || age >= 100)
        {
            errors.Add($"Invalid Age: {age}");
        }

        return errors;
    }
}
