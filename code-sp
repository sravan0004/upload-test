try
{
    var specimen = new Specimen
    {
        ID = specimenID,
        PanelID = panelID,
        SpecimenIdentifier = dr["Specimen Identifier"]?.ToString()?.Trim(),
        StudyCodeName = dr["Study"]?.ToString()?.Trim(),
        DeidentifiedPatientId = dr["Deidentified Patient Id"]?.ToString()?.Trim(),
        PlasmaVolume = TryParseDecimal(dr["Total Specimen Volume"], "Total Specimen Volume", errorList, rowNumber),
        NumberOfAliquot = TryParseInt(dr["# of Aliquots"], "# of Aliquots", errorList, rowNumber),
        SampleTypeCode = dr["Sample Type"]?.ToString()?.Trim(),
        PlasmaBoxNumber = dr["Box Number"]?.ToString()?.Trim(),
        BoxSortNumber = dr["Box Sort Number"]?.ToString()?.Trim(),
        SortNumber = TryParseDecimal(dr["Sort Number"], "Sort Number", errorList, rowNumber),
        WholeBloodAliquot = dr["Whole Blood Aliquot"]?.ToString()?.Trim(),
        WholeBloodBoxNumber = dr["Whole Blood Box Number"]?.ToString()?.Trim(),
        DispositionStatus = dr["Status"]?.ToString()?.Trim(),
        SpecimenComment = dr["Comment"]?.ToString()?.Trim(),
        Site = dr["Collection Site"]?.ToString()?.Trim(),
        City = dr["City"]?.ToString()?.Trim(),
        SpecimenCountry = GetCountryCode(dr["Country"]?.ToString(), _context, errorList, rowNumber),
        DrawDate = TryParseDate(dr["Collection Date"], "Collection Date", errorList, rowNumber),
        Sex = GetSexCode(dr["Sex"]?.ToString(), sexList, errorList, rowNumber),
        Age = TryParseDecimal(dr["Age"], "Age", errorList, rowNumber),
        Clinic = dr["Clinic Type"]?.ToString()?.Trim(),
        StudyTypeID = GetStudyTypeId(dr["Study"]?.ToString(), _context, errorList, rowNumber)
    };

    specimens.Add(specimen);
}
catch (Exception ex)
{
    errorList.Add($"Row {rowNumber}: Unexpected error while mapping specimen data â€” {ex.Message}");
}
private static int? TryParseInt(object value, string fieldName, List<string> errors, int row)
{
    if (value == null || string.IsNullOrWhiteSpace(value.ToString())) return null;
    if (int.TryParse(value.ToString(), out int result)) return result;

    errors.Add($"Row {row}: Invalid integer value for {fieldName} ('{value}')");
    return null;
}

private static decimal? TryParseDecimal(object value, string fieldName, List<string> errors, int row)
{
    if (value == null || string.IsNullOrWhiteSpace(value.ToString())) return null;
    if (decimal.TryParse(value.ToString(), out decimal result)) return result;

    errors.Add($"Row {row}: Invalid decimal value for {fieldName} ('{value}')");
    return null;
}

private static DateTime? TryParseDate(object value, string fieldName, List<string> errors, int row)
{
    if (value == null || string.IsNullOrWhiteSpace(value.ToString())) return null;
    if (DateTime.TryParse(value.ToString(), out DateTime date)) return date;

    errors.Add($"Row {row}: Invalid date format for {fieldName} ('{value}')");
    return null;
}

private static string GetCountryCode(string? countryName, ApplicationDbContext context, List<string> errors, int row)
{
    if (string.IsNullOrWhiteSpace(countryName)) return null;

    var country = context.Country.FirstOrDefault(c => c.Name == countryName);
    if (country == null)
    {
        errors.Add($"Row {row}: Country '{countryName}' not found in lookup.");
        return null;
    }

    return country.Code;
}

private static string GetSexCode(string? sexName, List<Sex> sexList, List<string> errors, int row)
{
    if (string.IsNullOrWhiteSpace(sexName)) return null;

    var sex = sexList.FirstOrDefault(s => s.Name.Equals(sexName, StringComparison.OrdinalIgnoreCase));
    if (sex == null)
    {
        errors.Add($"Row {row}: Invalid Sex '{sexName}'");
        return null;
    }

    return sex.ID.ToString();
}

private static int? GetStudyTypeId(string? studyName, ApplicationDbContext context, List<string> errors, int row)
{
    if (string.IsNullOrWhiteSpace(studyName)) return null;

    var studyType = context.StudyType.FirstOrDefault(s => s.Name == studyName);
    if (studyType == null)
    {
        errors.Add($"Row {row}: Study Type '{studyName}' not found in lookup.");
        return null;
    }

    return studyType.ID;
}
